{"version":3,"sources":["Components/TelaCadastro/TelaCadastro.js","Components/InfoUsuario/InfoUsuario.js","Components/ListaUsuarios/ListaUsuarios.js","App.js","serviceWorker.js","index.js"],"names":["axiosConfig","headers","Authorization","TelaCadastro","state","nomeInput","emailInput","onChangeInputName","event","setState","target","value","onChangeInputEmail","onKeyEnterPress","key","which","cadastraUsuario","body","axios","post","then","alert","catch","error","className","type","onChange","this","onKeyPress","on","onClick","id","React","Component","InfoUsuario","email","nome","props","idUsuario","componentDidMount","detalhesUsuario","get","response","console","log","data","name","deletarUsuario","ItemLista","styled","span","BotaoDeletar","button","Carregando","div","ListaUsuarios","usuariosCadastrados","pegaUsuarios","window","confirm","delete","pegarIdUsuario","carregando","length","listaUsuarios","map","usuario","ContainerApp","Botao","App","cadastroNaTela","onClickChangeScreen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.93b950a1.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport './TelaCadastro.css'\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        Authorization: \"eros-valente-mello\"\r\n    }\r\n}\r\nclass TelaCadastro extends React.Component {\r\n    state = {\r\n        nomeInput: \"\",\r\n        emailInput: \"\"\r\n    }\r\n\r\n    onChangeInputName = event => {\r\n        this.setState({ nomeInput: event.target.value })\r\n    }    \r\n\r\n    onChangeInputEmail = event => {\r\n        this.setState({ emailInput: event.target.value })\r\n    }\r\n\r\n    onKeyEnterPress = event => {\r\n        if(event.key === \"Enter\" || event.which === 13) {\r\n            this.cadastraUsuario()\r\n        }\r\n    }\r\n\r\n    cadastraUsuario = () => {\r\n        const body = {\r\n            \"name\": this.state.nomeInput,\r\n            \"email\": this.state.emailInput,\r\n        }\r\n\r\n        axios.post(\"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\", \r\n        body, \r\n        axiosConfig\r\n        )\r\n        .then(() => {\r\n            alert(`Usuário ${this.state.nomeInput}  cadastrado com sucesso`)\r\n            this.setState({\r\n                nomeInput: \"\",\r\n                emailInput: \"\"\r\n            })\r\n        }).catch((error) => {\r\n            alert(`Erro ao cadastrar usuário! \\n${error}`)\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"formulario\">\r\n                    <div>\r\n                        <label>Nome: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            onChange={this.onChangeInputName}\r\n                            value={this.state.nomeInput}    \r\n                        />\r\n                    </div>        \r\n                    <div>\r\n                        <label>E-mail: </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            onChange={this.onChangeInputEmail}\r\n                            onKeyPress={this.onKeyEnterPress}\r\n                            value={this.state.emailInput}\r\n                            on\r\n                        />\r\n                    </div>\r\n                    <button onClick={this.cadastraUsuario} id=\"botaoSalvar\">Salvar</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default TelaCadastro;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        Authorization: \"eros-valente-mello\"\r\n    }\r\n}\r\n\r\nclass InfoUsuario extends React.Component {\r\n    state = {\r\n        email: \"\",\r\n        nome: \"\",\r\n        id: this.props.idUsuario\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.detalhesUsuario()\r\n    }\r\n\r\n    detalhesUsuario = () => {\r\n        axios\r\n            .get(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${this.state.id}`,\r\n            axiosConfig\r\n            )\r\n            .then(response => {\r\n                console.log(response.data)\r\n                this.setState({\r\n                    email: response.data.email,\r\n                    nome: response.data.name,\r\n                    \r\n                })\r\n            })\r\n    }\r\n    render() {\r\n\r\n        \r\n        return (\r\n            <div>\r\n                <p>{this.state.nome} - {this.state.email}</p>\r\n                <button onClick={this.props.deletarUsuario}>deletar usuario</button>\r\n            </div>\r\n        )\r\n    }           \r\n}\r\n\r\nexport default InfoUsuario;\r\n","import React  from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport InfoUsuario from '../InfoUsuario/InfoUsuario';\r\n\r\nconst ItemLista = styled.span`\r\n    cursor: pointer;\r\n`\r\n\r\nconst BotaoDeletar = styled.button`\r\n    color: red;\r\n    margin: 5px;\r\n    cursor: pointer;\r\n`\r\nconst Carregando =styled.div`\r\n    border: 6px solid rgba(0, 0, 0, .3);\r\n    border-left-color: #22a6b3;\r\n    height: 40px;\r\n    width: 40px;\r\n    border-radius: 50%;\r\n    animation: spin 1s linear infinite;\r\n\r\n    @keyframes spin {\r\n        to {transform: rotate(360deg);}\r\n        \r\n    }\r\n`\r\n\r\nconst axiosConfig = {\r\n    headers: {\r\n        Authorization: \"eros-valente-mello\"\r\n    }\r\n}\r\n\r\nclass ListaUsuarios extends React.Component {\r\n    state = {\r\n        usuariosCadastrados: [],\r\n        id: \"\"\r\n    }\r\n  \r\n    componentDidMount = () => {\r\n        this.pegaUsuarios()\r\n    }\r\n\r\n    pegaUsuarios = () => {\r\n        axios\r\n            .get(\"https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users\",\r\n            axiosConfig\r\n            )\r\n            .then(response => {\r\n                this.setState({ usuariosCadastrados: response.data })\r\n            })        \r\n    }\r\n    \r\n    deletarUsuario = (idUsuario) => {\r\n        if(window.confirm(\"Tem certeza que deseja excluir esse usuário?\")) {\r\n            axios\r\n                .delete(`https://us-central1-labenu-apis.cloudfunctions.net/labenusers/users/${idUsuario}`,\r\n                axiosConfig\r\n                )\r\n                .then(() => {\r\n                    alert(\"Usuário excluído com sucesso\")  \r\n                    this.pegaUsuarios()    \r\n                })\r\n                .catch((error) => {\r\n                    alert(\"Erro ao excluir usuário\")\r\n                    console.log(error)\r\n                })\r\n        }        \r\n    }\r\n\r\n    pegarIdUsuario = (idUsuario) => {\r\n        console.log(idUsuario)\r\n        this.setState({id: idUsuario})\r\n        console.log(this.state.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        const carregando = this.state.usuariosCadastrados.length === 0 && <Carregando></Carregando>\r\n        const listaUsuarios = this.state.usuariosCadastrados.map(usuario => {\r\n            return (\r\n                <li>\r\n                    <ItemLista onClick={() => this.pegarIdUsuario(usuario.id)}>{usuario.name}</ItemLista>\r\n                    <BotaoDeletar onClick={() => this.deletarUsuario(usuario.id)}>X</BotaoDeletar>\r\n                </li>\r\n            )    \r\n        })\r\n\r\n        return (\r\n            <ul>\r\n                {carregando}\r\n                {this.state.id === \"\" ? listaUsuarios : <InfoUsuario deletarUsuario={() => {this.deletarUsuario(this.state.id)}} idUsuario={this.state.id}/>}\r\n            </ul>\r\n        )\r\n    }        \r\n\r\n    \r\n}\r\n\r\nexport default ListaUsuarios;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport TelaCadastro from './Components/TelaCadastro/TelaCadastro'\nimport ListaUsuarios from './Components/ListaUsuarios/ListaUsuarios'\n\nconst ContainerApp = styled.div`\n    display: flex;\n    margin: 10px;\n    flex-direction: column;\n    align-items: center;\n`\nconst Botao = styled.button`\n    align-self: flex-start;\n`\nclass App extends React.Component {\n    state = {\n        cadastroNaTela: true\n    }\n\n    onClickChangeScreen = () => {\n        this.setState({ cadastroNaTela: !this.state.cadastroNaTela})\n    }\n\n    render() {\n        if(this.state.cadastroNaTela) {\n            return (\n               <ContainerApp>\n                    <Botao onClick={this.onClickChangeScreen}>Ir para lista de usuários</Botao>\n                    <TelaCadastro/>\n               </ContainerApp>\n            )\n        } else {\n            return (\n               <ContainerApp>\n                    <Botao onClick={this.onClickChangeScreen}>Ir para página de cadastro</Botao>\n                    <ListaUsuarios/>\n               </ContainerApp>\n            )    \n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}